---
// WebPage and WebSite Schema for structured data
import { getFaqSchema } from "../data/faqs";
import BreadcrumbSchema from "./BreadcrumbSchema.astro";

interface BreadcrumbItem {
  name: string;
  url: string;
}

interface Props {
  name: string;
  headline?: string;
  description: string;
  image?: string;
  siteName?: string;
  siteUrl?: string;
  includeFAQ?: boolean;
  breadcrumbs?: BreadcrumbItem[];
}

const {
  headline = "Break Free from Trust-Killing Web Analytics",
  description = "Stop betraying users' trust by shipping their data to third parties. Get the insights you need while keeping their data 100% in-house.",
  image = "https://getinfinitymetrics.com/InfinityMetrics%20128x720.png",
  siteName = "Infinity Metrics",
  siteUrl = "https://getinfinitymetrics.com",
  includeFAQ = false,
  breadcrumbs = [],
} = Astro.props as Props;

// Get current page URL
const currentUrl = Astro.url.href;

// Create consolidated schema array to avoid multiple @context declarations
const schemaArray = [];

// Website schema (primary)
schemaArray.push({
  "@type": "WebSite",
  "@id": siteUrl,
  name: siteName,
  url: siteUrl,
});

// WebPage schema
schemaArray.push({
  "@type": "WebPage",
  mainEntityOfPage: {
    "@type": "WebPage",
    "@id": currentUrl,
  },
  name: siteName,
  headline: headline,
  description: description,
  url: currentUrl,
  image: image,
  isPartOf: {
    "@id": siteUrl,
  },
});

// Add FAQ schema if requested
if (includeFAQ) {
  const faqSchema = getFaqSchema();
  schemaArray.push({
    "@type": "FAQPage",
    mainEntity: faqSchema.mainEntity,
  });
}

// Create consolidated schema with single @context
const consolidatedSchema = {
  "@context": "https://schema.org",
  "@graph": schemaArray,
};

const consolidatedSchemaString = JSON.stringify(consolidatedSchema);
---

<script type="application/ld+json" set:html={consolidatedSchemaString} />
{
  breadcrumbs && breadcrumbs.length > 0 && (
    <BreadcrumbSchema breadcrumbs={breadcrumbs} />
  )
}
