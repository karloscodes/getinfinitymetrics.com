---
// ProductSchema for structured data
import { formatPrice } from "./FAQ.astro";
import { getFaqSchema } from "../data/faqs";

interface Props {
  productName: string;
  description: string;
  basePrice: number;
  salePrice?: number;
  brand?: string;
  categoryPath?: string[];
  sku: string;
  availability?: "InStock" | "OutOfStock" | "PreOrder";
  ratingValue?: number;
  reviewCount?: number;
  includeFAQ?: boolean;
}

const {
  productName,
  description,
  basePrice,
  salePrice,
  brand = "Infinity Metrics",
  categoryPath = ["Software", "Analytics", "Self-hosted"],
  sku,
  availability = "InStock",
  ratingValue = 5,
  reviewCount = 5,
  includeFAQ = false,
} = Astro.props as Props;

// Create breadcrumb list for Schema
const breadcrumbList = [];
for (let i = 0; i < categoryPath.length; i++) {
  const category = categoryPath[i];
  const slug = category.toLowerCase().replace(/\s+/g, "-");
  breadcrumbList.push({
    "@type": "ListItem",
    position: i + 1,
    name: category,
    item: "https://infinitymetrics.com/category/" + slug,
  });
}

// Format prices for schema
const priceForSchema = formatPrice(salePrice || basePrice, false);
const highPriceForSchema = salePrice
  ? formatPrice(basePrice, false)
  : undefined;

// Get FAQ schema
const faqSchema = getFaqSchema();

// Calculate priceValidUntil date (30 days from now)
const today = new Date();
const priceValidUntilDate = new Date(
  new Date().setDate(new Date().getDate() + 90),
);
const priceValidUntil = priceValidUntilDate.toISOString().split("T")[0];

// Hardcoded image URL - PLEASE UPDATE
const absoluteImageUrl =
  "https://infinitymetrics.com/InfinityMetrics%20128x720.png"; // Updated with user-provided image path

// Combined schema
const productSchema = {
  "@context": "https://schema.org/",
  "@graph": [
    {
      "@type": "Product",
      name: productName,
      description: description,
      image: absoluteImageUrl,
      sku: sku,
      brand: {
        "@type": "Brand",
        name: brand,
      },
      offers: {
        "@type": "Offer",
        url: "https://infinitymetrics.com",
        priceCurrency: "USD",
        price: priceForSchema,
        ...(highPriceForSchema ? { highPrice: highPriceForSchema } : {}),
        priceValidUntil: priceValidUntil,
        availability: `https://schema.org/${availability}`,
        hasMerchantReturnPolicy: {
          "@type": "MerchantReturnPolicy",
          applicableCountry: "US",
          returnPolicyCategory:
            "https://schema.org/MerchantReturnFiniteReturnWindow",
          merchantReturnDays: 30,
          itemCondition: "https://schema.org/NewCondition",
          refundType: "https://schema.org/FullRefund",
        },
        seller: {
          "@type": "Organization",
          name: brand,
        },
      },
      aggregateRating: {
        "@type": "AggregateRating",
        ratingValue: ratingValue.toString(),
        reviewCount: reviewCount.toString(),
      },
    },
    ...(includeFAQ ? [faqSchema] : []),
  ],
};

const schemaString = JSON.stringify(productSchema);
---

<script type="application/ld+json" set:html={schemaString} />
