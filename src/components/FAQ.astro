---
import { faqs } from "../data/faqs";

/**
 * Format a price value with or without the currency symbol
 * @param {number} price - The price to format
 * @param {boolean} [includeCurrency=true] - Whether to include the currency symbol
 * @returns {string} The formatted price
 */
export function formatPrice(price: number, includeCurrency = true): string {
  const formatter = new Intl.NumberFormat("en-US", {
    style: includeCurrency ? "currency" : "decimal",
    currency: "USD",
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  });

  return formatter.format(price);
}

const { class: className } = Astro.props;
---

<section id="faq" class={`py-20 md:py-24 bg-white ${className}`}>
  <div class="container">
    <div class="max-w-3xl mx-auto mb-16 text-center">
      <span class="inline-block px-3 py-1 bg-black bg-opacity-5 rounded-full text-sm font-medium mb-4">
        FAQ
      </span>
      <h2 class="text-3xl md:text-4xl font-black mb-6 text-black">
        Frequently Asked Questions
      </h2>
      <p class="text-gray-600 text-base font-medium">
        Everything you need to know about Infinity Metrics
      </p>
    </div>

    <div class="max-w-3xl mx-auto">
      <div class="space-y-5" id="faq-container">
        {
          faqs.map((faq, index) => (
            <div class="faq-item bg-white rounded-lg border border-black shadow-md">
              <h3>
                <button 
                  class="w-full flex justify-between items-center text-left font-medium text-gray-800 p-6 hover:text-black transition-colors duration-200"
                  aria-expanded="false"
                  aria-controls={`faq-content-${index}`}
                  data-faq-toggle
                >
                  <span class="text-lg font-bold">{faq.question}</span>
                  <span class="flex items-center justify-center w-8 h-8 rounded-full bg-black bg-opacity-5 transition-all duration-300 hover:bg-opacity-10">
                    <svg
                      class="faq-icon h-5 w-5 transition-transform duration-300"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="1"
                        d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                      />
                    </svg>
                  </span>
                </button>
              </h3>

              <div id={`faq-content-${index}`} class="faq-content px-6 pb-6 pt-0 text-gray-600">
                <div class="h-px bg-black mb-4"></div>
                <p class="leading-relaxed font-medium">{faq.answer}</p>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<style>
  .faq-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease-out, padding-bottom 0.4s ease-out;
    padding-top: 0;
    padding-bottom: 0;
  }

  .faq-content.open {
    max-height: 500px; /* Adjust as needed */
    padding-top: 0;
    padding-bottom: 1.5rem; /* pb-6 */
  }

  .faq-item {
    @apply bg-white rounded-lg border border-black shadow-md transition-all duration-300;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Set animation delays
    document.querySelectorAll('.faq-item').forEach((item: Element, index: number) => {
      if (item instanceof HTMLElement) {
        item.style.setProperty('--animation-order', index.toString());
      }
    });

    // Event Delegation for Accordion toggle
    const faqContainer = document.getElementById('faq-container');
    if (faqContainer) {
      faqContainer.addEventListener('click', (event: Event) => {
        if (!event.target) return;
        
        // Find the button that was clicked (or check if the click was inside a button)
        const target = event.target as HTMLElement;
        const button = target.closest('[data-faq-toggle]');
        
        if (!button) {
          return; 
        }

        const contentId = button.getAttribute('aria-controls');
        if (!contentId) return;
        const content = document.getElementById(contentId);
        if (!content) return;
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        const currentIcon = button.querySelector('.faq-icon');

        // Toggle current FAQ
        button.setAttribute('aria-expanded', String(!isExpanded));
        if (currentIcon) {
          currentIcon.classList.toggle('rotate-45');
        }
        content.classList.remove('hidden'); // Explicitly remove hidden
        content.classList.toggle('open');
      });
    } else {
      console.error('FAQ container #faq-container not found!');
    }
  });
</script>
